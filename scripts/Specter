if not game:IsLoaded() then
    print("Waiting for game to load...")
    game.Loaded:Wait()
    print("Loaded")
end

task.wait(5)

local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/Library.lua'))()
local Version = "V1.7.0"

library:Notify("Loaded Auto Farm. Current Version: " .. Version)
library:Notify("Auto Farm Made By @kylosilly On Discord <3")

--// Services
local services = {
    VIM = game:GetService("VirtualInputManager"),
    RS = game:GetService("ReplicatedStorage"),
    TCS = game:GetService("TextChatService"),
    Players = game:GetService("Players"),
    TS = game:GetService("TeleportService"),
    RunService = game:GetService("RunService"),
    Workspace = game:GetService("Workspace"),
    Lighting = game:GetService("Lighting")
}

local localPlayer = services.Players.LocalPlayer
local camera = services.Workspace.CurrentCamera

--// Paths
local paths = {
    evidence = {
        fingerprints = services.Workspace.Dynamic.Evidence.Fingerprints,
        motions = services.Workspace.Dynamic.Evidence.MotionGrids,
        orbs = services.Workspace.Dynamic.Evidence.Orbs,
        emf = services.Workspace.Dynamic.Evidence.EMF
    },
    sinks = services.Workspace.Map.EventObjects.Sinks,
    van = {
        equipment = services.Workspace.Van.Equipment,
        button = services.Workspace.Van.Close,
        van = services.Workspace.Van
    },
    map = services.Workspace:FindFirstChild("Map"),
    packages = services.RS:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services")
}

--// Variables
local evidence = {
    fingerprint = false,
    spirit_box = false,
    emf_five = false,
    freezing = false,
    no_freezing = false,
    writing = false,
    no_writing = false,
    motion = false,
    no_motion = false,
    orb = false
}

local status = {
    collected_equipment = false,
    collected_bone = false,
    started_round = false,
    check_fingerprint = true,
    check_info = true,
    check_emf = true,
    check_orb = true,
    got_room = false
}

local ghost_room = nil
local room_name = nil

--// Helper Functions
local function teleportTo(position, offset)
    offset = offset or Vector3.new(0, 5, 0)
    localPlayer.Character.HumanoidRootPart.CFrame = (typeof(position) == "CFrame" and position or position.CFrame) + offset
end

local function fireProximity(prompt)
    fireproximityprompt(prompt)
end

local function invokeDrop(slot)
    paths.packages:WaitForChild("InventoryService"):WaitForChild("RF"):WaitForChild("Drop"):InvokeServer(slot)
end

local function invokePickup(item)
    paths.packages:WaitForChild("InventoryService"):WaitForChild("RF"):WaitForChild("PickupItem"):InvokeServer(item)
end

local function invokeToggle(item)
    paths.packages:WaitForChild("InventoryService"):WaitForChild("RF"):WaitForChild("Toggle"):InvokeServer(item)
end

local function notifyAndPrint(message)
    library:Notify(message)
    print(message)
end

local function simulateMouseClick()
    services.VIM:SendMouseButtonEvent(camera.ViewportSize.X/2, camera.ViewportSize.Y/2, 0, true, game, 1)
    task.wait(0.1)
    services.VIM:SendMouseButtonEvent(camera.ViewportSize.X/2, camera.ViewportSize.Y/2, 0, false, game, 1)
end

local function kickPlayer(reason)
    localPlayer:Kick(reason .. " Please report this to @kylosilly on discord!")
    task.wait(1)
    services.TS:Teleport(8267733039)
end

--// Setup
services.Lighting.ClockTime = 12
services.Lighting.GlobalShadows = false

--// Event Handlers
paths.evidence.emf.ChildAdded:Connect(function(emf)
    if emf.Name == "EMF5" and status.check_emf then
        notifyAndPrint("Found EMF5")
        evidence.emf_five = true
        status.check_emf = false
    end
end)

paths.evidence.fingerprints.ChildAdded:Connect(function(fingerprint)
    if fingerprint:IsA("Part") and status.check_fingerprint then
        notifyAndPrint("Found Fingerprint")
        evidence.fingerprint = true
        status.check_fingerprint = false
    end
end)

paths.evidence.orbs.ChildAdded:Connect(function(orb)
    if orb:IsA("Part") and status.check_orb then
        notifyAndPrint("Found Orbs")
        evidence.orb = true
        status.check_orb = false
    end
end)

local motion_connection = services.RunService.RenderStepped:Connect(function()
    for _, motion in pairs(paths.evidence.motions:GetDescendants()) do
        if motion:IsA("Part") then
            if motion.Color == Color3.fromRGB(252, 52, 52) then
                notifyAndPrint("Found Motion")
                evidence.motion = true
                motion_connection:Disconnect()
                break
            elseif motion.BrickColor == BrickColor.new("Toothpaste") then
                notifyAndPrint("No Motion")
                evidence.no_motion = true
                motion_connection:Disconnect()
                break
            end
        end
    end
end)

--// Start Main Logic
services.VIM:SendKeyEvent(true, Enum.KeyCode.One, false, nil)
invokeDrop(1)

-- Check player attributes
if localPlayer then
    local device = localPlayer:GetAttribute("Device")
    local gid = localPlayer:GetAttribute("GID")
    local join_time = localPlayer:GetAttribute("Join")

    if device and gid and join_time then
        print"Semi Auto Farm Script Made By @kylosilly On Discord <3"
        print"------------------------------------------------------"
        print("Debug Info Ignore This!")
        print("Device: " .. device)
        print("LocalPlayer GID: " .. gid)
        print("Join Time: " .. os.date("%Y-%m-%d %H:%M:%S", join_time))
        print"------------------------------------------------------"
        status.checked_info = true
    end
elseif not status.checked_info then
    kickPlayer("Couldnt get attributes of localplayer")
end

-- Collect bone if exists
if status.checked_info then
    local bone = paths.map:FindFirstChild("Bone")
    if bone then
        local last_pos = localPlayer.Character.HumanoidRootPart.CFrame
        local bone_prompt = bone:FindFirstChildOfClass("ProximityPrompt")
        
        teleportTo(bone)
        task.wait(.5)
        fireProximity(bone_prompt)
        task.wait(.5)
        localPlayer.Character.HumanoidRootPart.CFrame = last_pos
        library:Notify("Collected Bone")
        status.collected_bone = true
    else
        library:Notify("No Bone Found, Skipping")
        status.collected_bone = true
    end
end

task.wait(2.5)

-- Start round
if status.collected_bone then
    local last_pos = localPlayer.Character.HumanoidRootPart.CFrame
    local van_prompt = paths.van.button:FindFirstChildOfClass("ProximityPrompt")

    if van_prompt then
        teleportTo(van_prompt.Parent, Vector3.new(3, 0, 0))
        camera.CFrame = van_prompt.Parent.CFrame
        task.wait(1)
        fireProximity(van_prompt)
        task.wait(1)
        localPlayer.Character.HumanoidRootPart.CFrame = last_pos
        status.started_round = true
    end
end

-- Collect equipment
if status.started_round then
    for _, equipment in next, paths.van.equipment:GetChildren() do
        if equipment:IsA("Model") and (equipment.Name == "EMF Reader" or equipment.Name == "Thermometer" or equipment.Name == "Spirit Box") then
            teleportTo(equipment.PrimaryPart)
            invokePickup(equipment)
            status.collected_equipment = true
        end
    end

    if not status.collected_equipment then
        kickPlayer("Equipment not found!")
    end

    -- Find ghost room with EMF
    if status.collected_equipment then
        services.VIM:SendKeyEvent(true, Enum.KeyCode.Two, false, nil)
        task.wait(.25)
        local emf_tool = localPlayer.Character:FindFirstChild("EquipmentModel") and localPlayer.Character.EquipmentModel:FindFirstChild("2")
        local emf = localPlayer.Character:FindFirstChild("EquipmentModel") and localPlayer.Character.EquipmentModel:FindFirstChild("1")

        if not emf_tool then
            kickPlayer("EMF tool not found!")
        end

        if not emf or emf.Color ~= Color3.fromRGB(52, 142, 64) then
            invokeToggle("EMF Reader")
        end

        for _, room in next, paths.map.Rooms:GetChildren() do
            if room:IsA("Folder") then
                local hitbox = room:FindFirstChild("Hitbox")
                if hitbox then
                    localPlayer.Character.HumanoidRootPart.CFrame = hitbox.CFrame
                    camera.CFrame = hitbox.CFrame
                    task.wait(.75)

                    if emf_tool.Color == Color3.fromRGB(131, 156, 49) then
                        ghost_room = hitbox.CFrame
                        room_name = room.Name
                        status.got_room = true
                        library:Notify("Got ghost room: " .. room.Name .. " (It Not Might Be Always The Ghost Room!)")
                        break
                    end
                end
            end
        end

        if not status.got_room then
            kickPlayer("Ghost room not found!")
        end
    end

    -- Hook room value
    if status.got_room and hookmetamethod then
        library:Notify("Hooking LocalPlayer Room Value To Ghost Room...")
        local old
        old = hookmetamethod(game, "__namecall", function(self, ...)
            local args = {...}
            local method = getnamecallmethod()

            if method == "InvokeServer" and self.Name == "UpdateRoom" and not checkcaller() then
                args[1] = room_name
                return old(self, unpack(args))
            end
            return old(self, ...)
        end)
    end    

    -- Check for freezing temperatures
    if status.got_room then
        services.VIM:SendKeyEvent(true, Enum.KeyCode.One, false, nil)
        task.wait(.25)
        local thermometer = localPlayer.Character and localPlayer.Character:FindFirstChild("EquipmentModel") and 
                           localPlayer.Character.EquipmentModel:FindFirstChild("Temp") and 
                           localPlayer.Character.EquipmentModel.Temp:FindFirstChild("SurfaceGui") and 
                           localPlayer.Character.EquipmentModel.Temp.SurfaceGui:FindFirstChild("TextLabel")
                           
        invokeToggle("Thermometer")

        if not thermometer then
            kickPlayer("Thermometer not found!")
        end

        if thermometer then
            teleportTo(ghost_room, Vector3.new())
            task.wait(8)
            local temperature = tonumber(thermometer.Text:match("[-%d]+"))
            
            if temperature and temperature < 0 then
                notifyAndPrint("Got Freezing Temperature")
                evidence.freezing = true
            else
                notifyAndPrint("No Freezing Temperature")
                evidence.no_freezing = true
            end
        end
    end

    -- Check for spirit box
    if (evidence.freezing or evidence.no_freezing) then
        services.VIM:SendKeyEvent(true, Enum.KeyCode.Three, false, nil)
        task.wait(.25)
        local spirit_box = localPlayer.Character and localPlayer.Character:FindFirstChild("EquipmentModel") and 
                          localPlayer.Character.EquipmentModel:FindFirstChild("Main")
                          
        invokeToggle("Spirit Box")

        if not spirit_box then
            kickPlayer("Spirit box not found!")
        end

        if spirit_box then
            local responses
            responses = spirit_box.DescendantAdded:Connect(function(reply)
                if reply:IsA("BillboardGui") then
                    invokeDrop(3)
                    responses:Disconnect()
                    evidence.spirit_box = true
                    notifyAndPrint("Got Spirit Box")
                end
            end)

            for i = 1, 15 do
                services.TCS:FindFirstChild("TextChannels").RBXGeneral:SendAsync("Where are you?")
                task.wait(.5)

                if evidence.spirit_box then
                    break
                end
            end

            if not evidence.spirit_box then
                invokeDrop(3)
                notifyAndPrint("No Spirit Box")
            end
        end
    end

    -- Check for ghost motion
    if true then -- Always execute
        for _, equipment in pairs(paths.van.equipment:GetChildren()) do
            if equipment:IsA("Model") and equipment.Name == "Motion Sensor" then
                teleportTo(equipment.PrimaryPart)
                invokePickup(equipment)
                teleportTo(ghost_room, Vector3.new())
                camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(1, -2.5, 0))
                task.wait(.75)
                simulateMouseClick()
                task.wait(.1)
                teleportTo(paths.van.van.PrimaryPart)
            end
        end

        task.wait(5)

        if not paths.evidence.motions then
            kickPlayer("Motion sensor not found!")
        end

        task.wait(8)

        local last_pos = {}
        for _, motion_grid in pairs(paths.evidence.motions:GetDescendants()) do
            if motion_grid:IsA("Part") then
                last_pos[motion_grid] = motion_grid.CFrame
                local ghost = services.Workspace.NPCs:FindFirstChildOfClass("Model")
                motion_grid.CFrame = ghost.HumanoidRootPart.CFrame + Vector3.new(1, 0, 0)
            end
        end

        task.wait(1)

        for part, pos in pairs(last_pos) do
            part.CFrame = pos
        end
    end

    -- Check for ghost writing
    task.wait(1)
    for _, equipment in pairs(paths.van.equipment:GetChildren()) do
        if equipment:IsA("Model") and equipment.Name == "Book" then
            teleportTo(equipment.PrimaryPart)
            invokePickup(equipment)
            teleportTo(ghost_room, Vector3.new())
            camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + Vector3.new(-1, -2.5, 0))
            task.wait(.75)
            simulateMouseClick()
            task.wait(.25)

            local book = services.Workspace.Equipment.Book
            teleportTo(CFrame.new(-223, 166, -213), Vector3.new())

            if not book then
                kickPlayer("Book not found!")
            end

            library:Notify("Waiting For Writing (This Will Take 1 Minute So Be Patient)")

            task.wait(60)

            if book:FindFirstChild("LeftPage") and book.LeftPage:FindFirstChildOfClass("Decal") and
               book:FindFirstChild("RightPage") and book.RightPage:FindFirstChildOfClass("Decal") then
                notifyAndPrint("Found Writing")
                evidence.writing = true
            else
                notifyAndPrint("No Writing")
                evidence.no_writing = true
            end
            
            teleportTo(paths.van.van.PrimaryPart, Vector3.new(0, 3, 0))
        end
    end

    -- Check for dirty water
    for _, sink in next, paths.sinks:GetChildren() do
        if sink.Transparency < 1 then
            library:Notify("Found Dirty Water In Sink")
            local sink_prompt = sink:FindFirstChildOfClass("ProximityPrompt")
            teleportTo(sink_prompt.Parent, Vector3.new())
            task.wait(0.5)
            fireProximity(sink_prompt)
            task.wait(0.5)
            teleportTo(paths.van.van.PrimaryPart, Vector3.new(0, 3, 0))
        end
    end

    -- Determine ghost type and end round
    local ghost_types = {
        {name = "Banshee", evidence = {emf_five = true, fingerprint = true, freezing = true}},
        {name = "Mare", evidence = {freezing = true, spirit_box = true, orb = true}},
        {name = "Wendigo", evidence = {motion = true, spirit_box = true, freezing = true}},
        {name = "Poltergeist", evidence = {spirit_box = true, fingerprint = true, orb = true}},
        {name = "Phantom", evidence = {freezing = true, orb = true, emf_five = true}},
        {name = "Jinn", evidence = {emf_five = true, motion = true, orb = true}},
        {name = "Upyr", evidence = {emf_five = true, freezing = true, motion = true}},
        {name = "Aswang", evidence = {emf_five = true, fingerprint = true, spirit_box = true}},
        {name = "Thaye", evidence = {orb = true, fingerprint = true, freezing = true}},
        {name = "O Tokata", evidence = {emf_five = true, fingerprint = true, orb = true}},
        {name = "Myling", evidence = {motion = true, emf_five = true, spirit_box = true}},
        {name = "Afarit", evidence = {motion = true, freezing = true, orb = true}},
        {name = "Preta", evidence = {motion = true, emf_five = true, fingerprint = true}},
        {name = "Yokai", evidence = {motion = true, freezing = true, fingerprint = true}},
        {name = "Demon", evidence = {writing = true, spirit_box = true, freezing = true}},
        {name = "Spirit", evidence = {writing = true, fingerprint = true, spirit_box = true}},
        {name = "Revenant", evidence = {emf_five = true, writing = true, fingerprint = true}},
        {name = "Shade", evidence = {emf_five = true, writing = true, orb = true}},
        {name = "Yurei", evidence = {freezing = true, writing = true, orb = true}},
        {name = "Oni", evidence = {motion = true, writing = true, spirit_box = true}},
        {name = "Egui", evidence = {orb = true, writing = true, spirit_box = true}},
        {name = "Wisp", evidence = {orb = true, fingerprint = true, writing = true}},
        {name = "Douen", evidence = {motion = true, fingerprint = true, writing = true}},
        {name = "Mimic", evidence = {spirit_box = true, writing = true, emf_five = true}},
        {name = "Bhuta", evidence = {motion = true, writing = true, freezing = true}}
    }

    local ghost_match = nil
    for _, ghost in ipairs(ghost_types) do
        local match = true
        for evidence_type, required in pairs(ghost.evidence) do
            if required and not evidence[evidence_type] then
                match = false
                break
            end
        end
        if match then
            ghost_match = ghost.name
            break
        end
    end

    if ghost_match then
        library:Notify("Ghost is: " .. ghost_match)
        paths.packages:WaitForChild("PlayerService"):WaitForChild("RF"):WaitForChild("UpdateGuess"):InvokeServer(ghost_match)
    else
        library:Notify("Couldn't Guess Ghost Teleporting Back To Lobby...")
    end
    
    -- Return to van
    teleportTo(paths.van.button, Vector3.new())
    task.wait(0.25)
    fireProximity(paths.van.button:FindFirstChildOfClass("ProximityPrompt"))
end
