local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")

-- Utility functions
local function Create(className, properties)
    local instance = Instance.new(className)
    for key, value in pairs(properties) do
        instance[key] = value
    end
    return instance
end

-- Create the main UI
local HttpSpy = Create("ScreenGui", {
    Name = HttpService:GenerateGUID(false),
    Parent = gethui(),
    ZIndexBehavior = Enum.ZIndexBehavior.Sibling
})

local MainFrame = Create("Frame", {
    Name = "MainFrame",
    Parent = HttpSpy,
    BackgroundColor3 = Color3.fromRGB(30, 30, 30),
    BorderSizePixel = 0,
    Position = UDim2.new(0.05, 0, 0.25, 0),
    Size = UDim2.new(0, 400, 0, 300)
})

Create("UICorner", {
    CornerRadius = UDim.new(0, 10),
    Parent = MainFrame
})

local TitleBar = Create("Frame", {
    Name = "TitleBar",
    Parent = MainFrame,
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BorderSizePixel = 0,
    Size = UDim2.new(1, 0, 0, 30)
})

Create("UICorner", {
    CornerRadius = UDim.new(0, 10),
    Parent = TitleBar
})

Create("TextLabel", {
    Name = "TitleText",
    Parent = TitleBar,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 10, 0, 0),
    Size = UDim2.new(1, -40, 1, 0),
    Font = Enum.Font.GothamSemibold,
    Text = "HTTP Spy v2",
    TextColor3 = Color3.fromRGB(255, 255, 255),
    TextSize = 14,
    TextXAlignment = Enum.TextXAlignment.Left
})

local MinimizeButton = Create("TextButton", {
    Name = "MinimizeButton",
    Parent = TitleBar,
    BackgroundTransparency = 1,
    Position = UDim2.new(1, -30, 0, 0),
    Size = UDim2.new(0, 30, 1, 0),
    Font = Enum.Font.GothamBold,
    Text = "-",
    TextColor3 = Color3.fromRGB(255, 255, 255),
    TextSize = 20
})

local MainContainer = Create("ScrollingFrame", {
    Name = "MainContainer",
    Parent = MainFrame,
    BackgroundTransparency = 1,
    Position = UDim2.new(0, 0, 0, 30),
    Size = UDim2.new(1, 0, 1, -30),
    ScrollBarThickness = 4,
    ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80),
    CanvasSize = UDim2.new(0, 0, 0, 0)
})

local UIListLayout = Create("UIListLayout", {
    Parent = MainContainer,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 5)
})

Create("UIPadding", {
    Parent = MainContainer,
    PaddingLeft = UDim.new(0, 10),
    PaddingRight = UDim.new(0, 10),
    PaddingTop = UDim.new(0, 10)
})

local NotificationFrame = Create("Frame", {
    Name = "NotificationFrame",
    Parent = HttpSpy,
    BackgroundColor3 = Color3.fromRGB(40, 40, 40),
    BorderSizePixel = 0,
    Position = UDim2.new(1, -220, 1, -60),
    Size = UDim2.new(0, 200, 0, 40),
    Visible = false
})

Create("UICorner", {
    CornerRadius = UDim.new(0, 5),
    Parent = NotificationFrame
})

Create("TextLabel", {
    Name = "NotificationText",
    Parent = NotificationFrame,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Font = Enum.Font.GothamSemibold,
    TextColor3 = Color3.fromRGB(255, 255, 255),
    TextSize = 14,
    Text = "Log copied to clipboard!"
})

-- UI Functions
local isMinimized = false

local function toggleMinimize()
    isMinimized = not isMinimized
    MainContainer.Visible = not isMinimized
    MainFrame.Size = isMinimized and UDim2.new(0, 400, 0, 30) or UDim2.new(0, 400, 0, 300)
    MinimizeButton.Text = isMinimized and "+" or "-"
end

local function makeDraggable(gui)
    local dragging, dragStart, startPos
    
    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

local function updateCanvasSize()
    MainContainer.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 20)
end

local function showNotification()
    NotificationFrame.Visible = true
    task.delay(2, function()
        NotificationFrame.Visible = false
    end)
end

local function createLogEntry(method, url)
    if not url then return end
    
    local logText = url
    
    local LogEntry = Create("TextButton", {
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font.SourceSansSemibold,
        TextColor3 = Color3.fromRGB(220, 220, 220),
        TextSize = 14,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        AutoButtonColor = false,
        Text = logText,
        Parent = MainContainer
    })

    Create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = LogEntry
    })

    Create("UIPadding", {
        Parent = LogEntry,
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
    })

    -- Dynamically size the log entry based on text content
    local textSize = TextService:GetTextSize(
        logText,
        LogEntry.TextSize,
        LogEntry.Font,
        Vector2.new(MainContainer.AbsoluteSize.X - 40, math.huge)
    )
    LogEntry.Size = UDim2.new(1, 0, 0, math.max(30, textSize.Y + 10))

    -- Hover effects
    local originalColor = LogEntry.BackgroundColor3
    
    LogEntry.MouseEnter:Connect(function()
        LogEntry.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    end)

    LogEntry.MouseLeave:Connect(function()
        LogEntry.BackgroundColor3 = originalColor
    end)

    LogEntry.MouseButton1Click:Connect(function()
        setclipboard(logText)
        showNotification()
    end)

    updateCanvasSize()
end

-- Initialize UI
makeDraggable(MainFrame)
MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)

-- Hook HTTP functions
local HttpGet = hookfunction(game.HttpGet, function(self, url, ...)
    createLogEntry("HTTP GET", url)
    return HttpGet(self, url, ...)
end)

local HttpPost = hookfunction(game.HttpPost, function(self, url, ...)
    createLogEntry("HTTP POST", url)
    return HttpPost(self, url, ...)
end)

-- Hook request functions based on executor support
if syn and syn.request then
    hookfunction(syn.request, function(data)
        createLogEntry(data.Method or "REQUEST", data.Url)
        return RequestLog(data)
    end)
elseif request then
    hookfunction(request, function(data)
        createLogEntry(data.Method or "REQUEST", data.Url)
        return RequestLog(data)
    end)
else
    createLogEntry("WARNING", "Your executor is not supported!")
end
